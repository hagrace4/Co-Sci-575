//Feher, Jozsef
//15245, 4-20-18
//Lab #6C

#include <iostream>
#include <iomanip>
#include <fstream>

//Prototypes
//Function 1
void cost_of_meal(int &kids, int &meal_cost);
void additional_cost(float &tax_and_tip_calc, float &surcharge_calc);
void Calc_total_and_output(float &Total_balance_due);

using namespace std;

int main()
{
	//const variables
	const float tax_and_tip = .18;
	const float kids_saving = .6;
	const float surcharge = .07;
	const float S = 21.75;
	const float D = 25.80;


	//declare variables
	char meal_type, weekend;
	float meal_cost, deposit, tax_and_tip_Calc, surcharge_calc, total_meal_cost, total_cost_of_party, total_balance_due;
	int ID, adults, kids, num;
	bool valid;
	ifstream infile;
	ofstream outfile;

	cout << fixed << showpoint << setprecision(2);

	do {
		valid = true;
		cout << "Enter party ID \n";
		cin >> ID;
		if (!cin)
		{
			cout << "The input must be a number." << endl;
			cin.clear();
			cin.ignore(200, '\n');
			valid = false;
		}
		else if (ID < 0)
		{
			cout << "Error! The input must be a positive number. \n";
			cin.clear();
			cin.ignore(200, '\n');
			valid = false;
		}
	} while (valid == false);


	do {
		valid = true;
		cout << "What is the number of adults? \n";
		cin >> adults;
		if (!cin)
		{
			cout << "The input must be a number." << endl;
			cin.clear();
			cin.ignore(200, '\n');
			valid = false;
		}
		else if (adults < 0)
		{
			cout << "Error! The input must be a positive number. \n";
			cin.clear();
			cin.ignore(200, '\n');
			valid = false;
		}
	} while (valid == false);

	do {
		valid = true;

		cout << "What is the number of children? \n";
		cin >> kids;
		if (!cin)
		{
			cout << "The input must be a number." << endl;
			cin.clear();
			cin.ignore(200, '\n');
			valid = false;
		}
		else if (kids < 0)
		{
			cout << "Error! The input must be a positive number. \n";
			cin.clear();
			cin.ignore(200, '\n');
			valid = false;
		}
	} while (valid == false);

	do {
		valid = true;
		cout << "What is the meal type? \n";
		cout << "Input must be <S> or <D>. \n";
		cin >> meal_type;
		while (meal_type != 'S' && meal_type != 's'  && meal_type != 'D' && meal_type != 'd')
		{
			cout << "Error! The meal type must be S or D. \n";
			cin >> meal_type;
		}
	} while (valid == false);
	do {
		valid = true;
		cout << "Is the catering done on the weekend (Friday, Saturday, or Sunday)? \n";
		cout << "<Y> for yes. <N> for no. \n";
		cin >> weekend;
		while (weekend != 'Y' && weekend != 'y' && weekend != 'N' && weekend != 'n')
		{
			cout << "Error! The input must be <Y> for yes or <N> for no. \n";
			cin >> weekend;
		}
	} while (valid == false);

	do {
		valid = true;
		cout << "What is the deposit for the meal? \n";
		cin >> deposit;
		if (!cin)
		{
			cout << "The input must be a number." << endl;
			cin.clear();
			cin.ignore(200, '\n');
			valid = false;
		}
		while (deposit < 0)
		{
			cout << "Error! The deposit can't be negative \n";
			cin >> deposit;
		}
	} while (valid == false);


	infile.open("D:\\Input File.txt");
	if (!infile)						//there was an error on open, file not found
	{
		cout << "Cannot open file, terminating program" << endl;
		exit(1);
	}
	cout << "Open the output file. \n";
	outfile.open("D:\\Output File.txt");
	infile >> num;

	while (!infile.eof())
	{
		outfile << " " << num << " ";
		infile >> num;
	}
	total_cost_of_party = 0;
	meal_cost = 0;
	surcharge_calc = 0;
	tax_and_tip_Calc = 0;
	total_balance_due = 0;
	outfile << "\t ID: " << ID << "\t\t";
	outfile << "\t Adults: " << adults << "\t\t";
	outfile << "\t Children: " << kids << "\t\t";
	outfile << "\t Meal Cost: " << meal_cost << "\t\t";
	outfile << "\t Surcharge: " << surcharge_calc << "\t\t";
	outfile << "\t Tax and Tip: " << tax_and_tip_Calc << "\t\t";
	outfile << "\t Total Cost of Party: " << total_cost_of_party << "\t\t";
	outfile << "\t Deposit: " << deposit << "\t\t";
	outfile << "\t Total Balance Due: " << total_balance_due << "\t\t";

	infile.close();
	outfile.close();
	system("pause");
}

 //Function 1

 //Function 2
void cost_of_meal(int &kids, int &meal_cost)
	{
		kids = (meal_type * kids_saving);
		meal_cost = (meal_type * adults) + (meal_type * kids);
	}

 //Function 3
	void additional_cost(float &tax_and_tip_calc, float &surcharge_calc)
 {
 tax_and_tip_Calc = tax_and_tip * meal_cost;
 surcharge_calc = surcharge * meal_cost;
 }

	//Function 4
	void Calc_total_and_output(float &Total_balance_due)
 {
 Total_balance_due = meal_cost * tax_and_tip;

 cout << ID << "\t\t" setw(10) << adults "\t\t" setw(10) << kids "\t\t" setw(10) << meal_cost;
 cout << surcharge_calc << "\t\t" setw(10) << tax_and_tip_calc;
 cout << total_cost_of_party << "\t\t" << setw(10) << deposit << "\t\t" << setw(10) << total_balance_due << endl;
 }
 


